<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>This task is meant to be called as part of another task, which we call the parent task. This parent task is usually intended for setting up a testing node that requires a user certificate. You can call this task with 'Build on the same node' parameter using the following input parameters:&#13;
&#13;
CN=(string)                      (required)        The CN of the new user certificate&#13;
SUB_CA=(string)              (optional)        An alias for the sub CA you want to create&#13;
SUB_CA_CN=(string)       (optional)        The CN of the sub CA you want to create&#13;
&#13;
Note : By default the new host certificate is signed with the root CA. If you want to create and use an intermediate sub CA instead, you must specify both SUB_CA_CN and SUB_CA! In case the specified SUB_CA is recognized as previously created no new sub CA will be created, instead the old one gets reused. This means that it is safe to pass 'rootCA' as SUB_CA, because this will have the same effect as not passing any SUB_CA value.&#13;
  &#13;
Calls certificate-master.create-certificate to create a host certificate with the provided CN and deploys it into ~/.globus/. Moreover, it also calls certificates-master.update-certificates to update /etc/grid-security/certificates to the latest ca bundle.</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.28">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>EMAIL=noone@nowhere.no</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>certificates-master.create-certificate</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35.2">
      <project>certificates-master.create-certificate</project>
      <filter>cert_testdir.tar.gz</filter>
      <target/>
      <excludes/>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>CA=${SUB_CA:-rootCA}
CERT="C=NL,O=Example,OU=PDP,CN=${CN}.crt"
KEY="C=NL,O=Example,OU=PDP,CN=${CN}.key"

tar xzf cert_testdir.tar.gz

mkdir -p ~/.globus
sudo cp -p "cert_testdir/${CA}/aliases/${CERT}" ~/.globus/usercert.pem
sudo chmod 600 ~/.globus/usercert.pem
sudo cp -p "cert_testdir/${CA}/aliases/${KEY}" ~/.globus/userkey.pem
sudo chmod 400 ~/.globus/userkey.pem</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.28">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>TARGET_HOST=$NODE_NAME</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>certificates-master.update-certificates</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
  </builders>
  <publishers>
    <hudson.plugins.chucknorris.CordellWalkerRecorder plugin="chucknorris@0.5">
      <factGenerator/>
    </hudson.plugins.chucknorris.CordellWalkerRecorder>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.26">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter/>
      <externalDelete/>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>
