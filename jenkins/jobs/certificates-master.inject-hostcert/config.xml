<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This task is meant to be called as part of another task, which we call the parent task. This parent task is usually intended for setting up a testing node that requires a host certificate. You can call this task with &apos;Build on the same node&apos; parameter using the following input parameters:&#xd;
&#xd;
SUB_CA=(string)             (optional)        An alias for the sub CA you want to create&#xd;
SUB_CA_CN=(string)     (optional)        The CN of the sub CA you want to create&#xd;
&#xd;
Note : By default the new host certificate is signed with the root CA. If you want to create and use an intermediate sub CA instead, you must specify both SUB_CA_CN and SUB_CA! In case the specified SUB_CA is recognized as previously created no new sub CA will be created, instead the old one gets reused. This means that it is safe to pass &apos;rootCA&apos; as SUB_CA, because this will have the same effect as not passing any SUB_CA value.&#xd;
  &#xd;
Calls certificate-master.create-certificate to create a host certificate with CN=$NODE_NAME and deploys it into /etc/grid-security. Moreover, it also calls certificates-master.update-certificates to update /etc/grid-security/certificates to the latest ca bundle.&#xd;
&#xd;
  TODO:  /etc/grid-security and it&apos;s content should be owned by root (depending on the scenario)&#xd;
  TODO:  Automatically create signing policies because more and more services require them (the right place for this might be in the CA creating script)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.28">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>CN=$HOSTNAME</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>certificates-master.create-certificate</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35.2">
      <project>certificates-master.create-certificate</project>
      <filter>cert_testdir.tar.gz</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>CN=$HOSTNAME
CA=${SUB_CA:-rootCA}
CERT=&quot;C=NL,O=Example,OU=PDP,CN=${CN}.crt&quot;
KEY=&quot;C=NL,O=Example,OU=PDP,CN=${CN}.key&quot;

tar xzf cert_testdir.tar.gz

sudo mkdir -p /etc/grid-security
sudo mv -f &quot;`readlink -f &quot;cert_testdir/${CA}/aliases/${CERT}&quot;`&quot; /etc/grid-security/hostcert.pem
sudo chmod 644 /etc/grid-security/hostcert.pem
sudo mv -f &quot;`readlink -f &quot;cert_testdir/${CA}/aliases/${KEY}&quot;`&quot; /etc/grid-security/hostkey.pem
sudo chmod 400 /etc/grid-security/hostkey.pem

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# creating signing policies. this bit should be moved later on into the certificate creating functions 

CERTIFICATES=cert_testdir/certificates/

for ca in `find &quot;${CERTIFICATES}&quot; -type f -name *.pem`; do
        hash=`openssl x509 -in &quot;${ca}&quot; -subject_hash -noout`
        hash_old=`openssl x509 -in &quot;${ca}&quot; -subject_hash_old -noout`
        subject=`openssl x509 -in &quot;${ca}&quot; -subject -noout | sed s/^subject=\ //`
        cond_subjects=`echo &quot;${subject}&quot; | sed s/CN=.*/\*/`

        cat &gt; &quot;${CERTIFICATES}/${hash}.signing_policy&quot; &lt;&lt;EOF
access_id_CA      X509     &apos;${subject}&apos;
pos_rights        globus   CA:sign
cond_subjects     globus   &apos;&quot;${cond_subjects}&quot;&apos;
EOF
        ln -f -s &quot;${hash}.signing_policy&quot; &quot;${CERTIFICATES}/${hash_old}.signing_policy&quot;
done

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

sudo mkdir -p /etc/grid-security/certificates/
sudo mv -f cert_testdir/certificates/* /etc/grid-security/certificates/</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.chucknorris.CordellWalkerRecorder plugin="chucknorris@0.5">
      <factGenerator/>
    </hudson.plugins.chucknorris.CordellWalkerRecorder>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.26">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>