<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Sets up tomcat as a standalone container serving SSL requests through port 8443&#xd;
&#xd;
It expects an input parameter specifying the endpoint to proxy requests to.&#xd;
&#xd;
Accepted options:&#xd;
&#xd;
PROXY_PATH       (optional)    / </description>
  <keepDependencies>false</keepDependencies>
  <properties>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>oa4mp-server||oa4mp-client</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>PROXY_PATH=${PROXY_PATH:-/}
HTTPD_HOME=&quot;/etc/httpd&quot;
HTTPD_SSL_CONFIG=&quot;${HTTPD_HOME}/conf.d/ssl.conf&quot;

# close unused ports in tomcat
if [ -z &quot;`xmlstarlet sel -T -t -i &quot;/Server/Service/Connector[@port=&apos;8080&apos;]&quot; -o exists ${CATALINA_HOME}/conf/server.xml`&quot; ]; then

        sudo xmlstarlet ed -L -d /Server/Service/Connector[@port=&apos;8080&apos;] ${CATALINA_HOME}/conf/server.xml
fi

if [ -n &quot;`xmlstarlet sel -T -t -i &quot;/Server/Service/Connector[@port=&apos;8443&apos;]&quot; -o exists ${CATALINA_HOME}/conf/server.xml`&quot; ]; then

        sudo xmlstarlet ed -L -d /Server/Service/Connector[@port=&apos;8443&apos;] ${CATALINA_HOME}/conf/server.xml
fi

# add httpd configuration
sudo sed -i &quot;s/^#*ServerName.*/ServerName `hostname`/&quot; ${HTTPD_SSL_CONFIG}
if [ -z &quot;`grep &apos;UseCanonicalName On&apos; ${HTTPD_SSL_CONFIG}`&quot; ]; then
        sudo sed -i &apos;/ServerName/ a\UseCanonicalName On&apos; ${HTTPD_SSL_CONFIG}
fi
if [ -z &quot;`grep &apos;UseCanonicalPhysicalPort On&apos; ${HTTPD_SSL_CONFIG}`&quot; ]; then
        sudo sed -i &apos;/ServerName/ a\UseCanonicalPhysicalPort On&apos; ${HTTPD_SSL_CONFIG}
fi

sudo sed -i &quot;s:^#*SSLCertificateFile.*:SSLCertificateFile /etc/grid-security/hostcert.pem:&quot; ${HTTPD_SSL_CONFIG}
sudo sed -i &quot;s:^#*SSLCertificateKeyFile.*:SSLCertificateKeyFile /etc/grid-security/hostkey.pem:&quot; ${HTTPD_SSL_CONFIG}

#HOSTCERT_ISSUER=&quot;`openssl x509 -in /etc/grid-security/hostcert.pem -issuer -noout | sed &apos;s/^issuer= //&apos;`&quot;
#HOSTCA_HASH=`grid-default-ca --list | grep &quot;${HOSTCERT_ISSUER}&quot; | head -n 1 | cut -d &apos; &apos; -f 2`
#HOSTCA=`readlink -f /etc/grid-security/certificates/${HOSTCA_HASH}.0`

HOSTCA=&quot;&quot;
for ca_cert in /etc/grid-security/certificates/*.pem; do
        RESULT=`openssl verify -CAfile $ca_cert /etc/grid-security/hostcert.pem`
        if [ $? -eq 0 ]; then
                HOSTCA=&quot;${ca_cert}&quot;
                break
        fi
done

sudo sed -i &quot;s:^#*SSLCertificateChainFile.*:SSLCertificateChainFile ${HOSTCA}:&quot; ${HTTPD_SSL_CONFIG}

if [ -z &quot;`grep &apos;ProxyRequests Off&apos; ${HTTPD_SSL_CONFIG}`&quot; ]; then
        sudo sed -i &apos;/ServerName/ a\ProxyRequests Off&apos; ${HTTPD_SSL_CONFIG}
fi
if [ -z &quot;`grep &quot;ProxyPass ${PROXY_PATH} ajp://127.0.0.1:8009${PROXY_PATH}&quot; ${HTTPD_SSL_CONFIG}`&quot; ]; then
        sudo sed -i &quot;/ServerName/ a\ProxyPass ${PROXY_PATH} ajp://127.0.0.1:8009${PROXY_PATH}&quot; ${HTTPD_SSL_CONFIG}
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>