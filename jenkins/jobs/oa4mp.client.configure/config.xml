<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Configure oa4mp client with a simple setup using file storage as backend. Every relevant server information is kept under /usr/www/client. Since this client has to be registered at the oa4mp-server some of the required fields are left unconfigured: id and secret. These two fields are provided upon registration and have to be filled in at /usr/www/client/conf/cfg.xml&#xd;
&#xd;
Accepted options:&#xd;
&#xd;
CLIENT_DIR                             (required) &#xd;
CLIENT_CONF_DIR                  (required)&#xd;
CLIENT_CONF_FILE                 (required)&#xd;
CLIENT_STORE_DIR                (required)&#xd;
CLIENT_LOG_DIR                    (required)&#xd;
CLIENT_KEYSTORE_PASS      (required)&#xd;
CLIENT_KEYSTORE                 (required)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>oa4mp-client</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Modify tomcats web.xml to reference the ouath2 client config files in a ContextParameter

if [ -z &quot;`xmlstarlet sel -T -N x=&quot;http://java.sun.com/xml/ns/javaee&quot; \
         -t -i x:web-app/x:context-param -o exists ${CATALINA_HOME}/conf/web.xml`&quot; ]; then

        sudo xmlstarlet ed -L -N x=&quot;http://java.sun.com/xml/ns/javaee&quot; -s /x:web-app -t elem -n file-context -v &quot;&quot; \
                       -s //file-context -t elem -n param-name -v &quot;oa4mp:oauth2.client.config.file&quot; \
                       -s //file-context -t elem -n param-value -v &quot;${CLIENT_CONF_FILE}&quot; \
                       -r //file-context -v context-param \
                       ${CATALINA_HOME}/conf/web.xml


        sudo xmlstarlet ed -L -N x=&quot;http://java.sun.com/xml/ns/javaee&quot; -s /x:web-app -t elem -n config-context -v &quot;&quot; \
                       -s //config-context -t elem -n param-name -v &quot;oa4mp:oauth2.client.config.name&quot; \
                       -s //config-context -t elem -n param-value -v &quot;default&quot; \
                       -r //config-context -v context-param \
                       ${CATALINA_HOME}/conf/web.xml

        # for some reason the formatting command exists with a non-zero return value, triggering failure
        sudo xmlstarlet fo -t -o ${CATALINA_HOME}/conf/web.xml &gt; /tmp/web.xml || echo &quot;formating xml&quot;
        sudo mv /tmp/web.xml ${CATALINA_HOME}/conf/web.xml
fi</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder plugin="scriptler@2.7">
      <builderId>1438941504256_18</builderId>
      <scriptId>3.groovy</scriptId>
      <propagateParams>false</propagateParams>
      <parameters>
        <org.jenkinsci.plugins.scriptler.config.Parameter>
          <name>KEYWORDS</name>
          <value>oa4mp-server</value>
        </org.jenkinsci.plugins.scriptler.config.Parameter>
        <org.jenkinsci.plugins.scriptler.config.Parameter>
          <name>RETURNED_ENV_VARIALBE</name>
          <value>OA4MP_SERVER_HOST</value>
        </org.jenkinsci.plugins.scriptler.config.Parameter>
      </parameters>
    </org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder>
    <hudson.tasks.Shell>
      <command># find out the real hostname form the certificate that the remote server provides 
# it is important to get the hostname right (without missing domain) otherwise
# SSL is going to break
echo &quot;nothing&quot; &gt; nothing
OA4MP_SERVER=&quot;`openssl s_client -ign_eof -CApath /etc/grid-security/certificates/ \
                   -connect ${OA4MP_SERVER_HOST}:443 &lt; nothing 2&gt;/dev/null  \
                   | grep -A 1 &apos;^Certificate chain$&apos; | tail -n 1 | sed &apos;s/.*CN=\(.*\)/\1/&apos;`&quot;       


# recreate client configuration 
sudo rm -rf &quot;${CLIENT_DIR}&quot;

sudo mkdir -p &quot;${CLIENT_CONF_DIR}&quot;
sudo mkdir -p &quot;${CLIENT_STORE_DIR}&quot;
sudo mkdir -p &quot;${CLIENT_LOG_DIR}&quot;

# create trust store including certificates from /etc/grid-security/certificates/
for cert in /etc/grid-security/certificates/*.pem; do
        echo Importing ... $cert
        sudo keytool -importcert -noprompt -trustcacerts -file ${cert} \
                -alias &quot;${cert}&quot; -keystore ${CLIENT_KEYSTORE} \
                -storepass ${CLIENT_KEYSTORE_PASS}
done

sudo chmod 400 ${CLIENT_KEYSTORE}

sudo rm -rf &quot;${CLIENT_CONF_FILE}&quot;
sudo tee &quot;${CLIENT_CONF_FILE}&quot; &lt;&lt;EOF
&lt;config&gt;

    &lt;client name=&quot;default&quot; alias=&quot;client-config&quot;/&gt;

    &lt;!-- ############################################################################## --&gt;

    &lt;client name=&quot;client-config&quot; address=&quot;https://${HOSTNAME}/client2&quot;&gt;

           &lt;logging
                     logFileName=&quot;${CLIENT_LOG_DIR}/oa2-client.log&quot;
                     logName=&quot;oa2-client&quot;
                     logSize=&quot;1000000&quot;
                     logFileCount=&quot;2&quot;
                     debug=&quot;true&quot;/&gt;

           &lt;callbackUri&gt;https://${HOSTNAME}/client2/ready&lt;/callbackUri&gt;

           &lt;serviceUri&gt;https://${OA4MP_SERVER}/oauth2&lt;/serviceUri&gt;

           &lt;id&gt;FILLTHIS&lt;/id&gt;
           &lt;secret&gt;FILLTHIS&lt;/secret&gt;


           &lt;fileStore path=&quot;${CLIENT_STORE_DIR}&quot;&gt;
                      &lt;assetStore/&gt;
           &lt;/fileStore&gt;

           &lt;showRedirectPage&gt;true&lt;/showRedirectPage&gt;

           &lt;keystore path=&quot;${CLIENT_KEYSTORE}&quot;
                     type=&quot;jks&quot;
                     password=&quot;changeit&quot;
                     factory=&quot;SunX509&quot; /&gt;
           
    &lt;/client&gt;


&lt;/config&gt;
EOF

sudo chown -R tomcat:tomcat &quot;${CLIENT_DIR}&quot;</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.envfile.EnvFileBuildWrapper plugin="envfile@1.2">
      <filePath>/var/lib/jenkins/demo-config/demonstration-portal.conf</filePath>
    </hudson.plugins.envfile.EnvFileBuildWrapper>
  </buildWrappers>
</project>